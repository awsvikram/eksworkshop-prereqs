        AWSTemplateFormatVersion: "2010-09-09"
         
        Description: The template will create EC2 instance and attach IAM role and create EKS Cluster with managed NG
        Parameters:
          KeyName:
            Type: "AWS::EC2::KeyPair::KeyName"
            Description: The EC2 Key Pair to allow SSH access to the instances
          AzName:
            Type: AWS::EC2::AvailabilityZone::Name
            Description: Subnet Availability Zone
          InstanceType:
            Description: EKS Workspace EC2 instance type
            Type: String
            Default: t2.large
            AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, m1.small,
              m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge, m2.4xlarge, m3.medium,
              m3.large, m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge,
              m4.10xlarge, c1.medium, c1.xlarge, c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge,
              c3.8xlarge, c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, g2.2xlarge,
              g2.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, i2.xlarge,
              i2.2xlarge, i2.4xlarge, i2.8xlarge, d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge,
              hi1.4xlarge, hs1.8xlarge, cr1.8xlarge, cc2.8xlarge, cg1.4xlarge]
            ConstraintDescription: must be a valid EC2 instance type.
          SSHLocation:
            Description: The IP address range that can be used to SSH to the EC2 instances
            Type: String
            MinLength: 9
            MaxLength: 18
            Default: 0.0.0.0/0
            AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
            ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
          LatestAmiId:
            Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
            Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
        Resources:
          EKSWorkshopIAMRole:
            Type: "AWS::IAM::Role"
            Properties:
              AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Principal:
                      Service:
                        - ec2.amazonaws.com
                    Action:
                      - "sts:AssumeRole"
              ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/AdministratorAccess"
          NodeInstanceProfile:
            Type: "AWS::IAM::InstanceProfile"
            Properties:
              Path: /
              Roles:
                - Ref: EKSWorkshopIAMRole
          VPCForWorkspace:
            Type: AWS::EC2::VPC
            Properties:
              CidrBlock: 10.204.0.0/16
              EnableDnsHostnames: 'true'
          PublicSubnet:
            Type: AWS::EC2::Subnet
            Properties:
              AvailabilityZone: !Ref AzName
              CidrBlock: 10.204.11.0/24
              MapPublicIpOnLaunch: 'true'
              VpcId: !Ref VPCForWorkspace
          VpcIgw:
            Type: AWS::EC2::InternetGateway
          VpcIgwAttachment:
            Type: AWS::EC2::VPCGatewayAttachment
            Properties:
              InternetGatewayId: !Ref VpcIgw
              VpcId: !Ref VPCForWorkspace
          RouteTable:
            Type: AWS::EC2::RouteTable
            DependsOn: VpcIgwAttachment
            Properties:
              VpcId: !Ref VPCForWorkspace
         
          DefaultRoute:
            Type: AWS::EC2::Route
            Properties:
              DestinationCidrBlock: 0.0.0.0/0
              GatewayId: !Ref VpcIgw
              RouteTableId: !Ref RouteTable
         
          AssociatePublicSubnetToRouteTable:
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
              RouteTableId: !Ref RouteTable
              SubnetId: !Ref PublicSubnet
          InstanceSecurityGroup:
            Type: AWS::EC2::SecurityGroup
            Properties:
              GroupDescription: Enable SSH access via port 22
              SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: !Ref 'SSHLocation'
          EC2Instance:
            Type: AWS::EC2::Instance
            Properties:
              InstanceType: !Ref 'InstanceType'
              SecurityGroups: [!Ref 'InstanceSecurityGroup']
              KeyName: !Ref 'KeyName'
              ImageId: !Ref 'LatestAmiId'
              IamInstanceProfile: !Ref 'NodeInstanceProfile'  
              Tags:
                - Key: Name
                  Value: EKSWorkshop-Workspace                       
              UserData:
                Fn::Base64:
                    Fn::Sub:
                        - |
                            #!/bin/bash -xe
                            sudo yum update -y
                            sudo yum update -y aws-cfn-bootstrap
                            sudo curl --silent --location -o /usr/local/bin/kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.15.10/2020-02-22/bin/linux/amd64/kubectl
                            sudo chmod +x /usr/local/bin/kubectl
                            sudo yum install git -y
                            sudo pip install --upgrade awscli && hash -r
                            sudo yum -y install jq gettext bash-completion
                            export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account)
                            export AWS_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.region')
                            echo "${COMMAND1}" | tee -a ~/.bash_profile
                            echo "${COMMAND2}" | tee -a ~/.bash_profile
                            ${COMMAND3}
                            aws configure get default.region 
                            mkdir ~/environment
                            cd ~/environment
                            git clone https://github.com/brentley/ecsdemo-frontend.git
                            git clone https://github.com/brentley/ecsdemo-nodejs.git
                            git clone https://github.com/brentley/ecsdemo-crystal.git
                            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                            sudo mv -v /tmp/eksctl /usr/local/bin
                            cat << EOF > /tmp/eksworkshop.yaml
                            ---
                            apiVersion: eksctl.io/v1alpha5
                            kind: ClusterConfig

                            metadata:
                             name: eksworkshop-eksctl
                             region: us-east-2

                            managedNodeGroups:
                            - name: nodegroup 
                              desiredCapacity: 3
                              iam:
                                withAddonPolicies:
                                  albIngress: true
                            EOF
                            eksctl create cluster -f /tmp/eksworkshop.yaml
                            echo "${COMMAND4}" | tee -a ~/.bash_profile                      
                        - COMMAND1: "export ACCOUNT_ID=${ACCOUNT_ID}"
                          COMMAND2: "export AWS_REGION=${AWS_REGION}"
                          COMMAND3: "aws configure set default.region ${AWS_REGION}"
                          COMMAND4: "export KUBECONFIG=$KUBECONFIG:/root/environment/.kube/config"
     
                    
     
     
     

